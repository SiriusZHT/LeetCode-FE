// 剑指 Offer II 069. 山峰数组的顶部
// 符合下列属性的数组 arr 称为 山峰数组（山脉数组） ：

// arr.length >= 3
// 存在 i（0 < i < arr.length - 1）使得：
// arr[0] < arr[1] < ... arr[i-1] < arr[i]
// arr[i] > arr[i+1] > ... > arr[arr.length - 1]
// 给定由整数组成的山峰数组 arr ，返回任何满足 arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1] 的下标 i ，即山峰顶部。

 

// 示例 1：

// 输入：arr = [0,1,0]
// 输出：1
// 示例 2：

// 输入：arr = [1,3,5,4,2]
// 输出：2
// 示例 3：

// 输入：arr = [0,10,5,2]
// 输出：1
// 示例 4：

// 输入：arr = [3,4,5,1]
// 输出：2
// 示例 5：

// 输入：arr = [24,69,100,99,79,78,67,36,26,19]
// 输出：2
 

// 提示：

// 3 <= arr.length <= 104
// 0 <= arr[i] <= 106
// 题目数据保证 arr 是一个山脉数组
 

// 进阶：很容易想到时间复杂度 O(n) 的解决方案，你可以设计一个 O(log(n)) 的解决方案吗？

 

// 注意：本题与主站 852 题相同：https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/


// 这个题目其实是一个旋转数组，而旋转数组是两部分有序的元素组成，所以用二分法无疑了
// 先取中位于数组中间的数字
// 如果这个数字比它前后两个数字都大，那么就找到了数组的最大值
// 如果这个数字比它前一个数字大，但比后一个数字小，那么这个数字位于数组递增的部分，数组的最大值一定在它的后面
// 如果这个数字比它前一个数字小，但比后一个数字大，那么这个数字位于数组递减的部分，数组的最大值一定在它的前面
/**
 * @param {number[]} arr
 * @return {number}
 */
var peakIndexInMountainArray = function(arr) {
  let left = 1,
    right = arr.length - 1;
  // 左闭右闭区间
  while (left <= right) {
    // 中间值  下面这样写是防止大数情况下溢出
    let mid = left + ((right - left) >> 1);
    // 如果这个数字比它前后两个数字都大
    if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) {
      return mid;
    }
    // 如果这个数字比它前一个数字大，但比后一个数字小，那么这个数字位于数组递增的部分，
    // 数组的最大值一定在它的后面
    if (arr[mid] > arr[mid - 1]) {
      left = mid + 1;
    } else {
      // 如果这个数字比它前一个数字小，但比后一个数字大，那么这个数字位于数组递减的部分，
      // 数组的最大值一定在它的前面
      right = mid - 1;
    }
  }
  return -1;
};